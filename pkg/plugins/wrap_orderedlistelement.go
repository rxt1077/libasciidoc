 
package plugins

// this file is automatically generated

import (
  "github.com/pkg/errors"
	"github.com/bytesparadise/libasciidoc/pkg/types"

  log "github.com/sirupsen/logrus"
)

func wrapOrderedListElement(obj *types.OrderedListElement) Wrap {
  log.Trace("Wrapping a OrderedListElement")

  // add type
  wrapped := Wrap {
    Type: "OrderedListElement",
    Value: nil,
  }

  // return nil values
  if obj == nil {
    return wrapped
  }

  // wrap non-atomic parts and store atoms
  wrapped.Value = map[string]interface{}{
  
    "attributes": wrap(obj.Attributes),
  
    "style": obj.Style,
  
    "elements": wrap(obj.Elements),
  
  }

  return wrapped
}

func unwrapOrderedListElement(value interface{}) (*types.OrderedListElement, error) {
  log.Trace("Unwrapping a OrderedListElement")

  // if it's nil, just return a nil of its type
  if value == nil {
    log.Trace("OrderedListElement is nil")
    return (*types.OrderedListElement)(nil), nil
  }

  // make sure all parts are present
  objMap, ok := value.(map[string]interface{})
  if ! ok {
    return nil, errors.New("'OrderedListElement' type not map[string]interface{}")
  }
  
    attributes, ok := objMap["attributes"]
    if ! ok {
      return nil, errors.New("OrderedListElement does not contain 'attributes'")
    }
  
    style, ok := objMap["style"]
    if ! ok {
      return nil, errors.New("OrderedListElement does not contain 'style'")
    }
  
    elements, ok := objMap["elements"]
    if ! ok {
      return nil, errors.New("OrderedListElement does not contain 'elements'")
    }
  

  // unwrap non-atomic parts
  var err error
  
    
      log.Trace("Unwrapping OrderedListElement attributes")
      attributes, err = unwrap(attributes)
      if err != nil {
        return nil, err
      }
    
  
    
  
    
      log.Trace("Unwrapping OrderedListElement elements")
      elements, err = unwrap(elements)
      if err != nil {
        return nil, err
      }
    
  

  // assert the types of the parts
  
    
      assertedAttributes, ok := attributes.(types.Attributes)
      if ! ok {
        return nil, errors.New("OrderedListElement Attributes is not type types.Attributes")
      }
    
  
    
      assertedStyle, ok := style.(string)
      if ! ok {
        return nil, errors.New("OrderedListElement Style is not type string")
      }
    
  
    
      assertedElements, ok := elements.([]interface{})
      if ! ok {
        return nil, errors.New("OrderedListElement Elements is not type []interface{}")
      }
    
  

  // build object
  return &types.OrderedListElement{
    Attributes: assertedAttributes,
    Style: assertedStyle,
    Elements: assertedElements,
  }, nil
}
