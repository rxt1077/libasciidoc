package plugins

// this file is automatically generated

import (
  "github.com/pkg/errors"
	"github.com/bytesparadise/libasciidoc/pkg/types"

  log "github.com/sirupsen/logrus"
)

func wrapInternalCrossReference(obj *types.InternalCrossReference) Wrap {
  log.Trace("Wrapping a InternalCrossReference")

  // add type
  wrapped := Wrap {
    Type: "InternalCrossReference",
    Value: nil,
  }

  // return nil values
  if obj == nil {
    return wrapped
  }

  id := interface{}(nil)
  if obj.ID != nil {
    id = wrap(obj.ID)
  }
  label := interface{}(nil)
  if obj.Label != nil {
    label = wrap(obj.Label)
  }

  // wrap non-atomic parts and store atoms
  wrapped.Value = map[string]interface{}{
    "id": id,
    "label": label,
  }

  return wrapped
}

func unwrapInternalCrossReference(value interface{}) (*types.InternalCrossReference, error) {
  log.Trace("Unwrapping a InternalCrossReference")

  // if it's nil, just return a nil of its type
  if value == nil {
    log.Trace("InternalCrossReference is nil")
    return (*types.InternalCrossReference)(nil), nil
  }

  // make sure all parts are present
  objMap, ok := value.(map[string]interface{})
  if ! ok {
    return nil, errors.New("'InternalCrossReference' type not map[string]interface{}")
  }
  id, ok := objMap["id"]
  if ! ok {
    return nil, errors.New("InternalCrossReference does not contain 'id'")
  }
  label, ok := objMap["label"]
  if ! ok {
    return nil, errors.New("InternalCrossReference does not contain 'label'")
  }

  // unwrap non-atomic parts
  var err error
  log.Trace("Unwrapping InternalCrossReference id")
  id, err = unwrap(id)
  if err != nil {
    return nil, err
  }
  log.Trace("Unwrapping InternalCrossReference label")
  label, err = unwrap(label)
  if err != nil {
    return nil, err
  }

  // assert the types of the parts
  assertedID, ok := id.(interface{})
  if ! ok {
    return nil, errors.New("InternalCrossReference ID is not type interface{}")
  }
  assertedLabel, ok := label.(interface{})
  if ! ok {
    return nil, errors.New("InternalCrossReference Label is not type interface{}")
  }

  // build object
  return &types.InternalCrossReference{
    ID: assertedID,
    Label: assertedLabel,
  }, nil
}
