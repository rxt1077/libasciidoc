 
package plugins

// this file is automatically generated

import (
  "github.com/pkg/errors"
	"github.com/bytesparadise/libasciidoc/pkg/types"

  log "github.com/sirupsen/logrus"
)

func wrapPreamble(obj *types.Preamble) Wrap {
  log.Trace("Wrapping a Preamble")

  // add type
  wrapped := Wrap {
    Type: "Preamble",
    Value: nil,
  }

  // return nil values
  if obj == nil {
    return wrapped
  }

  // wrap non-atomic parts and store atoms
  wrapped.Value = map[string]interface{}{
  
    "elements": wrap(obj.Elements),
  
    "tableOfContents": wrap(obj.TableOfContents),
  
  }

  return wrapped
}

func unwrapPreamble(value interface{}) (*types.Preamble, error) {
  log.Trace("Unwrapping a Preamble")

  // if it's nil, just return a nil of its type
  if value == nil {
    log.Trace("Preamble is nil")
    return (*types.Preamble)(nil), nil
  }

  // make sure all parts are present
  objMap, ok := value.(map[string]interface{})
  if ! ok {
    return nil, errors.New("'Preamble' type not map[string]interface{}")
  }
  
    elements, ok := objMap["elements"]
    if ! ok {
      return nil, errors.New("Preamble does not contain 'elements'")
    }
  
    tableOfContents, ok := objMap["tableOfContents"]
    if ! ok {
      return nil, errors.New("Preamble does not contain 'tableOfContents'")
    }
  

  // unwrap non-atomic parts
  var err error
  
    
      log.Trace("Unwrapping Preamble elements")
      elements, err = unwrap(elements)
      if err != nil {
        return nil, err
      }
    
  
    
      log.Trace("Unwrapping Preamble tableOfContents")
      tableOfContents, err = unwrap(tableOfContents)
      if err != nil {
        return nil, err
      }
    
  

  // assert the types of the parts
  
    
      assertedElements, ok := elements.([]interface{})
      if ! ok {
        return nil, errors.New("Preamble Elements is not type []interface{}")
      }
    
  
    
      assertedTableOfContents, ok := tableOfContents.(*types.TableOfContents)
      if ! ok {
        return nil, errors.New("Preamble TableOfContents is not type *types.TableOfContents")
      }
    
  

  // build object
  return &types.Preamble{
    Elements: assertedElements,
    TableOfContents: assertedTableOfContents,
  }, nil
}
